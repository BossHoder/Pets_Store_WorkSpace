const AppError = require('../utils/AppError');

const handleCastErrorDB = (err) => {
    const message = `Gi√° tr·ªã kh√¥ng h·ª£p l·ªá ${err.path}: ${err.value}.`;
    return new AppError(message, 400);
};

const handleDuplicateFieldsDB = (err) => {
    // Tr√≠ch xu·∫•t gi√° tr·ªã b·ªã tr√πng t·ª´ th√¥ng b√°o l·ªói (c·∫ßn t√πy ch·ªânh theo l·ªói c·ª• th·ªÉ)
    const value = err.errmsg ? err.errmsg.match(/(["'])(\\?.)*?\1/)[0] : Object.values(err.keyValue)[0];
    const message = `Gi√° tr·ªã tr∆∞·ªùng b·ªã tr√πng: ${value}. Vui l√≤ng s·ª≠ d·ª•ng gi√° tr·ªã kh√°c.`;
    return new AppError(message, 400);
};

const handleValidationErrorDB = (err) => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. ${errors.join('. ')}`;
    return new AppError(message, 400);
};

const handleJWTError = () => new AppError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);
const handleJWTExpiredError = () => new AppError('Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);


const sendErrorDev = (err, res) => {
    console.error('L·ªñI üí£', err);
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack,
    });
};

const sendErrorProd = (err, res) => {
    // A) L·ªói c√≥ th·ªÉ d·ª± ƒëo√°n ƒë∆∞·ª£c, g·ª≠i th√¥ng b√°o cho client
    if (err.isOperational) {
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message,
        });
    // B) L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh: kh√¥ng r√≤ r·ªâ chi ti·∫øt l·ªói
    } else {
        // 1) Log l·ªói
        console.error('L·ªñI üí£ (Kh√¥ng th·ªÉ d·ª± ƒëo√°n)', err);
        // 2) G·ª≠i th√¥ng b√°o chung chung
        res.status(500).json({
            status: 'error',
            message: 'ƒê√£ c√≥ l·ªói x·∫£y ra ph√≠a server!',
        });
    }
};


module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV === 'development') {
        sendErrorDev(err, res);
    } else if (process.env.NODE_ENV === 'production') {
        let error = { ...err }; // T·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng thay ƒë·ªïi err g·ªëc
        error.message = err.message; // Quan tr·ªçng ƒë·ªÉ gi·ªØ l·∫°i message g·ªëc

        if (error.name === 'CastError') error = handleCastErrorDB(error);
        if (error.code === 11000) error = handleDuplicateFieldsDB(error); // L·ªói tr√πng key
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
        if (error.name === 'JsonWebTokenError') error = handleJWTError();
        if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();
        
        sendErrorProd(error, res);
    }
};